version: '3.8'

services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-vacation_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-vacation_pass}
      - POSTGRES_DB=${POSTGRES_DB:-vacation_db}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vacation_user} -d ${POSTGRES_DB:-vacation_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - vacation_network
    # En producción, no expongas este puerto al host
    # ports:
    #   - "5432:5432"

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - vacation_network
    # En producción, no expongas este puerto al host
    # ports:
    #   - "6379:6379"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: ./start.sh
    volumes:
      - backend_static:/app/static
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-vacation_user}:${POSTGRES_PASSWORD:-vacation_pass}@db:5432/${POSTGRES_DB:-vacation_db}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-CAMBIAR_EN_PRODUCCION_USAR_VALOR_SEGURO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - vacation_network
    ports:
      - "${API_PORT:-8000}:8000"

#  celery_worker:
#    build:
#      context: ./backend
#      dockerfile: Dockerfile
#    # Comando para iniciar el worker de Celery
#    command: celery -A app.worker.celery_app worker --loglevel=${LOG_LEVEL:-info}
#    environment:
#      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-vacation_user}:${POSTGRES_PASSWORD:-vacation_pass}@db:5432/${POSTGRES_DB:-vacation_db}
#      - REDIS_URL=redis://redis:6379/0
#      - SECRET_KEY=${SECRET_KEY:-CAMBIAR_EN_PRODUCCION_USAR_VALOR_SEGURO}
#      - ENVIRONMENT=${ENVIRONMENT:-production}
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    restart: unless-stopped
#    networks:
#      - vacation_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - frontend_assets:/usr/share/nginx/html
    environment:
      - REACT_APP_API_BASE_URL=${API_BASE_URL:-http://prueba.test:8000/api/v1}
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - vacation_network
    ports:
      - "${WEB_PORT:-80}:80"

volumes:
  postgres_data:
  redis_data:
  backend_static:
  frontend_assets:

networks:
  vacation_network:
    driver: bridge 